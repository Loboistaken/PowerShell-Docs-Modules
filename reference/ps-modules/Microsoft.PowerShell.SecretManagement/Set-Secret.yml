### YamlMime:PowershellCmdlet
summary: |-
  Adds a secret to a SecretManagement registered vault.
module: Microsoft.PowerShell.SecretManagement
notes: ""
inputs:
- name: <xref href="System.Collections.Hashtable" data-throw-if-not-resolved="False" />
  description: ""
outputs:
- name: <xref href="None" data-throw-if-not-resolved="False" />
  description: ""
syntaxes:
- >-
  Set-Secret [-Name] <String> -SecureStringSecret <SecureString> [[-Vault] <String>]

   [[-Metadata] <Hashtable>] [-NoClobber] [-WhatIf] [-Confirm] [<CommonParameters>]
- >-
  Set-Secret [-Name] <String> -Secret <Object> [[-Vault] <String>] [[-Metadata] <Hashtable>]

   [-NoClobber] [-WhatIf] [-Confirm] [<CommonParameters>]
- >-
  Set-Secret -SecretInfo <SecretInformation> [-Vault] <String> [-NoClobber] [-WhatIf] [-Confirm]

   [<CommonParameters>]
examples:
- title: Example 1
  code: |-
    Set-Secret -Name Secret1 -Secret "SecretValue"
    Get-Secret -Name Secret1

    System.Security.SecureString
  description: |-
    This example adds a secret named `Secret1` with a plain text value of `SecretValue`. Since no vault
    name was specified, the secret is added to the current user's default vault. `Get-Secret` shows
    the secret was added.
  summary: ""
- title: Example 2
  code: |-
    PS C:\> Set-Secret -Name Secret2 -Vault LocalStore

    cmdlet Set-Secret at command pipeline position 1
    Supply values for the following parameters:
    SecureStringSecret: ***********

    PS C:\> Get-Secret -Name Secret2
    System.Security.SecureString
  description: |-
    This example adds a secret named `Secret2` to the `LocalStore` vault. Since no secret value was
    provided, the cmdlet prompts for a **SecureString** value. The console hides the string value as it
    is typed. `Get-Secret` shows the secret was added.
  summary: ""
- title: Example 3
  code: |-
    $Metadata = @{ Expiration = ([datetime]::new(2022, 5, 1)) }
    Set-Secret -Name TargetSecret -Secret $targetToken -Vault LocalStore -Metadata $Metadata
    Get-SecretInfo -Name TargetSecret | Select-Object Name,Metadata

    Name         Metadata
    ----         --------
    TargetSecret {[Expiration, 5/1/2022 12:00:00 AM]}
  description: |-
    This example adds a secret named `TargetSecret` to the `LocalStore` vault with metadata indicating
    the secret's expiration date. `Get-SecretInfo` retrieves the metadata for the newly created secret.
  summary: ""
- title: Example 4
  code: |-
    $Metadata = @{ Expiration = ([datetime]::new(2022, 5, 1)) }
    Set-Secret -Name PublishSecret -Secret $targetToken -Vault LocalStore2 -Metadata $Metadata

    Set-Secret: Cannot store secret PublishSecret. Vault LocalStore2 does not support secret metadata.
  description: |-
    This example adds a secret named `PublishSecret` to the `LocalStore2` vault with extra metadata.
    However, vault `LocalStore2` does not support secret metadata and the operation returns an error.
  summary: ""
parameters:
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: Confirm
  description: |+
    Prompts you for confirmation before running the cmdlet.

  defaultValue: None
  position: Named
  aliases: cf
  parameterValueGroup: ""
- type: <xref href="Hashtable" data-throw-if-not-resolved="False" />
  name: Metadata
  description: |+
    Specifies a **Hashtable** containing key-value pairs to associate with the secret in the vault. The
    specified extension vault may not support secret metadata. If the vault does not support metadata,
    the operation fails and returns an error. The values of any metadata in the hashtable must be one of
    the following types:

    - **string**
    - **int**
    - **DateTime**

    Metadata is not stored securely in a vault. Metadata should not contain sensitive information.

  defaultValue: None
  position: "1"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: Name
  isRequired: true
  description: |+
    Specifies the name of the secret to add or update. Wildcard characters (`*`) are not permitted.

  defaultValue: None
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: NoClobber
  description: |+
    Indicates that the command should error if a secret with the same name already exists in the vault.
    By default, this cmdlet updates the secret with the new value if it already exists.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="Object" data-throw-if-not-resolved="False" />
  name: Secret
  isRequired: true
  description: |+
    Specifies the value of the secret. The object must be one of the supported types:

    - **Byte[]**
    - **String**
    - **SecureString**
    - **PSCredential**
    - **Hashtable**

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="SecretInformation" data-throw-if-not-resolved="False" />
  name: SecretInfo
  isRequired: true
  description: |+
    Specifies a **SecretInformation** object describing a stored secret returned by `Get-SecretInfo`.
    This enables copying secrets from one extension vault to another.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="SecureString" data-throw-if-not-resolved="False" />
  name: SecureStringSecret
  isRequired: true
  description: |+
    Specifies the value of the secret as a **SecretString** object.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: Vault
  description: |+
    Specifies the name of the vault to add or update the secret in. Wildcard characters (`*`) are not
    permitted. By default, the secret is added or updated in the current user's default vault.

  defaultValue: None
  position: "2"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: WhatIf
  description: |+
    Shows what would happen if the cmdlet runs. The cmdlet is not run.

  defaultValue: None
  position: Named
  aliases: wi
  parameterValueGroup: ""
uid: Microsoft.PowerShell.SecretManagement.Set-Secret
name: Set-Secret
description: |-
  This cmdlet adds a secret value by name to a vault. If no vault name is specified the secret is
  added to the default vault. If a secret with that name exists, it is overwritten. Additional data
  can be included with the secret if supported by the extension vault.

  The default parameter set takes a **SecureString** object. If you run the command without specifying
  the secret value, the cmdlet prompts you to to enter a **SecureString**. The text of the string is
  not visible in the console.
metadata:
  external help file: Microsoft.PowerShell.SecretManagement.dll-Help.xml
  Module Name: Microsoft.PowerShell.SecretManagement
  ms.date: 05/31/2022
  online version: https://learn.microsoft.com/powershell/module/microsoft.powershell.secretmanagement/set-secret?view=ps-modules&wt.mc_id=ps-gethelp
  schema: 2.0.0
