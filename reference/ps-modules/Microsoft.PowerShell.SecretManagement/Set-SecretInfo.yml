### YamlMime:PowershellCmdlet
summary: |-
  Adds or replaces additional secret metadata to a secret currently stored in a vault.
module: Microsoft.PowerShell.SecretManagement
notes: ""
inputs:
- name: <xref href="System.Collections.Hashtable" data-throw-if-not-resolved="False" />
  description: ""
outputs:
- name: <xref href="None" data-throw-if-not-resolved="False" />
  description: ""
syntaxes:
- >-
  Set-Secret [-Name] <String> -SecureStringSecret <SecureString> [[-Vault] <String>]

   [[-Metadata] <Hashtable>] [-NoClobber] [-WhatIf] [-Confirm] [<CommonParameters>]
- >-
  Set-Secret [-Name] <String> -Secret <Object> [[-Vault] <String>] [[-Metadata] <Hashtable>]

   [-NoClobber] [-WhatIf] [-Confirm] [<CommonParameters>]
- >-
  Set-Secret -SecretInfo <SecretInformation> [-Vault] <String> [-NoClobber] [-WhatIf] [-Confirm]

   [<CommonParameters>]
examples:
- title: Example 1
  code: |-
    Set-SecretInfo -Name Secret1 -Vault Vault1 -Metadata @{ Expiration = ([datetime]::new(2022, 5, 1)) }
    Get-SecretInfo -Name Secret1 -Vault Vault1 | Select-Object Name,Metadata

    Name         Metadata
    ----         --------
    Secret1 {[Expiration, 5/1/2022 12:00:00 AM]}
  description: |-
    This example adds metadata to the `Secret1` secret stored in `Vault1` vault. `Get-SecretInfo`
    retrieves the metadata for `Secret1` to show the added metadata.
  summary: ""
- title: Example 2
  code: |-
    Set-SecretInfo -Name Secret2 -Vault Vault2 -Metadata @{ Expiration = ([datetime]::new(2022, 5, 1)) }

    Set-SecretInfo: Cannot set secret metadata Secret2. Vault Vault2 does not support secret metadata.
  description: |-
    This example adds metadata to the `Secret2` secret stored in `Vault2` vault. However, `Vault2` does
    not support metadata. The command fails and returns an error.
  summary: ""
parameters:
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: Confirm
  description: |+
    Prompts you for confirmation before running the cmdlet.

  defaultValue: None
  position: Named
  aliases: cf
  parameterValueGroup: ""
- type: <xref href="Hashtable" data-throw-if-not-resolved="False" />
  name: Metadata
  description: |+
    Specifies a **Hashtable** containing key-value pairs to associate with the secret in the vault. The
    specified extension vault may not support secret metadata. If the vault does not support metadata,
    the operation fails and returns an error. The values of any metadata in the hashtable must be one of
    the following types:

    - **string**
    - **int**
    - **DateTime**

    Metadata is not stored securely in a vault. Metadata should not contain sensitive information.

  defaultValue: None
  position: "1"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: Name
  isRequired: true
  description: |+
    Specifies the name of the secret to add metadata to. Wildcard characters (`*`) are not permitted.

  defaultValue: None
  position: "0"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: NoClobber
  description: |+
    Indicates that the command should error if a secret with the same name already exists in the vault.
    By default, this cmdlet updates the secret with the new value if it already exists.

  defaultValue: None
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="Object" data-throw-if-not-resolved="False" />
  name: Secret
  isRequired: true
  description: |+
    Specifies the value of the secret. The object type must be one of the supported types:

    - **Byte[]**
    - **String**
    - **SecureString**
    - **PSCredential**
    - **Hashtable**

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="SecretInformation" data-throw-if-not-resolved="False" />
  name: SecretInfo
  isRequired: true
  description: |+
    Specifies a **SecretInformation** object describing a stored secret returned by `Get-SecretInfo`.
    This enables copying secrets from one extension vault to another.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="SecureString" data-throw-if-not-resolved="False" />
  name: SecureStringSecret
  isRequired: true
  description: |+
    Specifies the value of the secret as a **SecretString** object.

  defaultValue: None
  pipelineInput: true
  position: Named
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="String" data-throw-if-not-resolved="False" />
  name: Vault
  description: |+
    Specifies the name of the vault containing the secret to add or update the metadata for. Wildcard
    characters (`*`) are not permitted. By default, this cmdlet looks for the secret in the current
    user's default vault.

  defaultValue: None
  position: "2"
  aliases: ""
  parameterValueGroup: ""
- type: <xref href="SwitchParameter" data-throw-if-not-resolved="False" />
  name: WhatIf
  description: |+
    Shows what would happen if the cmdlet runs. The cmdlet is not run.

  defaultValue: None
  position: Named
  aliases: wi
  parameterValueGroup: ""
uid: Microsoft.PowerShell.SecretManagement.Set-SecretInfo
name: Set-SecretInfo
description: |-
  This cmdlet adds additional metadata information to a stored secret. Metadata support is an optional
  feature for an extension vault. If a vault does not support secret metadata, the cmdlet returns an
  error.

  Metadata is not stored securely in a vault. Metadata should not contain sensitive information.
metadata:
  external help file: Microsoft.PowerShell.SecretManagement.dll-Help.xml
  Module Name: Microsoft.PowerShell.SecretManagement
  ms.date: 05/31/2022
  online version: https://learn.microsoft.com/powershell/module/microsoft.powershell.secretmanagement/set-secretinfo?view=ps-modules&wt.mc_id=ps-gethelp
  schema: 2.0.0
